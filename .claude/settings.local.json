{
  "permissions": {
    "allow": [
      "Bash(uv pip install:*)",
      "Bash(ruff check:*)",
      "Bash(ruff format:*)",
      "Bash(./setup-hooks.sh)",
      "Bash(git add:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add storage abstractions, ruff linting, and docker compose\n\nMajor additions and improvements:\n\nStorage Abstractions:\n- Add BlobStorage API with MinIO backend for binary/file data\n- Add ObjectStorage API with MongoDB backend for document data\n- Both APIs support pluggable backends for easy swapping\n- Include comprehensive demo script for both storage types\n\nInfrastructure:\n- Add docker-compose.yml with MongoDB and MinIO services\n- Configure persistent volumes for data across runs\n- Services optimized for OrbStack usage\n\nCode Quality:\n- Add ruff for linting and formatting\n- Configure ruff with modern Python 3.12+ rules\n- Auto-fix 1,148 linting issues (type hints, imports, etc.)\n- Update pre-commit hook to run ruff before tests\n- Modernize all type annotations (Optional[X] â†’ X | None)\n\nDependencies:\n- Add minio>=7.2.0 for S3-compatible blob storage\n- Add pymongo>=4.6.0 for MongoDB operations\n- Add ruff>=0.8.0 to dev dependencies\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(python:*)",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add filesystem backend for blob storage\n\nAdd a local filesystem implementation of the blob storage backend,\nproviding an alternative to MinIO for development and testing.\n\nFeatures:\n- Store blobs as files on local filesystem\n- Metadata stored in accompanying JSON files (.meta)\n- Full BlobStorageBackend interface implementation\n- Automatic directory creation and cleanup\n- Stream I/O support\n- File URL generation for compatibility\n\nIncludes comprehensive demo script showing all operations.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")",
      "Bash(git commit -m \"$(cat <<''EOF''\nfeat: add named backend registry system with hierarchical namespacing\n\nImplement a registry-based system for configuring and accessing blob\nstorage backends using simple names instead of connection parameters.\n\nFeatures:\n- Python-based configuration file (blob_config.py)\n- Hierarchical naming with dot notation (e.g., \"dev.images.thumbnails\")\n- Automatic prefix/namespace handling for each backend type\n- Backend caching for performance\n- BlobStorage.from_name() convenience method\n- Support for filesystem and MinIO backends\n\nKey Components:\n- blob_config.py: Configuration dict with backend definitions\n- registry.py: BlobBackendRegistry for name resolution\n- prefixed_backend.py: PrefixedBlobBackend wrapper for namespace handling\n- BlobStorage.from_name(): Classmethod for easy instantiation\n\nUsage:\n    # Simple usage with named backend\n    storage = BlobStorage.from_name(\"dev\")\n    \n    # Hierarchical namespace\n    storage = BlobStorage.from_name(\"dev.images.thumbnails\")\n    # Automatically adds \"images/thumbnails/\" prefix to all keys\n\nConfiguration Example:\n    CONFIGURATION = {\n        \"dev\": {\n            \"type\": \"filesystem\",\n            \"base_path\": \"~/.jqsys/blob_storage/dev\"\n        },\n        \"minio-local\": {\n            \"type\": \"minio\",\n            \"endpoint\": \"localhost:9000\",\n            \"bucket\": \"jqsys-dev\"\n        }\n    }\n\nIncludes comprehensive demo showing all features.\n\nðŸ¤– Generated with [Claude Code](https://claude.com/claude-code)\n\nCo-Authored-By: Claude <noreply@anthropic.com>\nEOF\n)\")"
    ],
    "deny": [],
    "ask": []
  }
}